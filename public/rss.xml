<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Hellō World]]></title><description><![CDATA[Hellō - Identity in minutes, not hours or days.
]]></description><link>https://blog.hello.dev</link><generator>RSS for Node</generator><lastBuildDate>Sat, 25 May 2024 11:12:50 GMT</lastBuildDate><atom:link href="https://blog.hello.dev/rss.xml" rel="self" type="application/rss+xml"/><language><![CDATA[en]]></language><ttl>60</ttl><atom:link rel="next" href="https://blog.hello.dev/rss.xml?page=2"/><atom:link rel="previous" href="https://blog.hello.dev/rss.xml"/><item><title><![CDATA[Hellō in 60 Seconds]]></title><description><![CDATA[<p>Tl;dr: Test drive the sample code <a target="_blank" href="https://github.com/hellocoop/hello-nextjs-sample/">https://github.com/hellocoop/hello-nextjs-sample/</a></p><p>In the video below, we walk through test-driving the sample repo:</p><ol><li><p>Fork &amp; clone the repo</p></li><li><p>Install the packages</p></li><li><p>Run Quickstart to create the app at Hell</p></li><li><p>Start the app and log in with Hell locally</p></li><li><p>Deploy the app to Vercel</p></li><li><p>Log in with Hell to the host dynamically generated by Vercel</p></li><li><p>Click through auto config to add the Redirect URI to the Hell Developer Console</p></li></ol><p>We then add Hell to one of the <a target="_blank" href="https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds">Next.js sample apps</a> per this post:</p><ol><li><p>Create a local copy of the blog sample app</p></li><li><p>Install the packages</p></li><li><p>Run Quickstart to create an app at Hell</p></li><li><p>Copy over the <code>hello-test.jsx</code> file</p></li><li><p>Start the app with <code>/hello-test</code> and login with Hell</p></li></ol><div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://www.youtube.com/watch?v=-5Dc9CVxeU4">https://www.youtube.com/watch?v=-5Dc9CVxeU4</a></div><p> </p><p>Note the pointer to the clock so you can see the true elapsed time!</p><p>See the <a target="_blank" href="https://blog.hello.dev/hello-auto-config">blog post on auto config</a> if you want to dive in deeper, complete with a sequence diagram.</p><p>Let us know your thoughts in the comments below!</p>]]></description><link>https://blog.hello.dev/hello-in-60-seconds</link><guid isPermaLink="true">https://blog.hello.dev/hello-in-60-seconds</guid><category><![CDATA[Hello World]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[OAuth2]]></category><category><![CDATA[Next.js]]></category><category><![CDATA[nextauth.js]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Wed, 15 Nov 2023 16:46:19 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1700003230112/086509af-bfff-4e8e-9368-f7550dd1afa8.png</cover_image></item><item><title><![CDATA[Add Hellō to any Next.js App in seconds]]></title><description><![CDATA[<p>In our mission to reduce developer friction, we looked at what we could do to simplify adding Hell to your app.</p><p>Running the commands below will create a Next.js sample app, add Hell, and open up a sample page for you to log in -- try it out!</p><p>To add Hell to your app, <code>cd</code> to your project directory, and skip the first two steps.</p><pre><code class="lang-bash">npx create-next-app@latest nextjs-blog --use-npm --example \    <span class="hljs-string">"https://github.com/vercel/next-learn/tree/main/basics/learn-starter"</span><span class="hljs-built_in">cd</span> nextjs-blognpm i --save @hellocoop/nextjs npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli curl -f https://raw.githubusercontent.com/hellocoop/hello.dev/main/samples/nextjs/hello-test.jsx \    &gt; ./pages/hello-test.jsxnpx @hellocoop/quickstart --nextjsnpx concurrently \    <span class="hljs-string">"PORT=3210 npm run dev"</span> \    <span class="hljs-string">"wait-on http://localhost:3210 &amp;&amp; open-cli \"http://localhost:3210/hello-test\""</span></code></pre><ol><li><p><code>npx create-next-app@latest nextjs-blog --use-npm --example \ "https://github.com/vercel/next-learn/tree/main/basics/learn-starter"</code></p><p> creates a sample Next.js app in the <code>nextjs-blog</code> directory. If you have your own app you want to add Hell to, you can skip this step.</p></li><li><p>Change to the project directory.</p></li><li><p><code>npm i --save @hellocoop/nextjs</code> installs all the project packages and the <code>@hellocoop/nextjs</code> package</p></li><li><p><code>npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli</code> installs npm CLI packages for this demo. See below for how they are used.</p></li><li><p><code>curl ... &gt; ./pages/hello-test.jsx</code> copies a test file from the <a target="_blank" href="https://www.hello.dev/docs/sdks/nextjs">hello.dev docs</a></p></li><li><p><code>npx @hellocoop/quickstart --nextjs</code> will:</p><ol><li><p>start a local webserver and prompt to open a browser;</p></li><li><p>you will then log in to Hell and be prompted on what to name your application or select an existing application;</p></li><li><p>The <code>client_id</code> for the application will be returned and written to the <code>hello.config.js</code> file in the root of your project; and</p></li><li><p>a <code>HELLO_COOKIE_SECRET</code> will be generated and written to <code>.env.local</code></p></li></ol></li><li><p><code>npm run dev</code> will start your server, <code>wait-on</code> will wait for it to start, and then<code>open-cli</code> will load the test file.</p></li></ol><p>Note that we are not React or Next.js experts! We are identity and security experts. Any feedback or suggestions on improving our React and Next.js packages would be appreciated!</p>]]></description><link>https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds</link><guid isPermaLink="true">https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds</guid><category><![CDATA[Next.js]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[Hello World]]></category><category><![CDATA[authentication]]></category><category><![CDATA[SSO]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Tue, 14 Nov 2023 20:20:03 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1699827119462/987b7391-9cb3-4f9a-aecb-e28eb1b4cebe.png</cover_image></item><item><title><![CDATA[Hellō Auto Config]]></title><description><![CDATA[<p>I have configured the popular social login providers for numerous applications over the years. Despite knowing a few <a target="_blank" href="https://datatracker.ietf.org/doc/html/rfc6749">things</a> about <a target="_blank" href="https://youtu.be/JzuCE7lDYrM">identity</a>, I find the configuration process tedious and confusing, and when talking to other developers, they have similar complaints.</p><p>We strive to simplify login and registration at Hell, and question why you need deep expertise in OAuth and OpenID Connect to use social login. How can we help you get up and running quickly so you can decide if Hell is the right solution for you? This question led us to not require you to start your journey with the Hell Developer Console, but with a simplified initial experience that creates a basic application for you.</p><h3 id="heading-hello-quickstart">Hell Quickstart</h3><p>Our first use of Quickstart was with <a target="_blank" href="https://wordpress.org/plugins/hello-login/">Hell Login</a>, our free WordPress plugin. You don't need to figure out your <code>redirect_uri</code>, or copy and paste a <code>client_id</code>. No need to manage a client secret. You don't even need to understand what those are. If your blog has a privacy policy and default image, Quickstart will configure them for you. <a target="_blank" href="https://www.youtube.com/watch?v=kCWY3viT368">This video</a> shows how Quickstart lets you add Hell to a blog and offer users all popular social login choices in 19 seconds vs 13 minutes for just Google with an alternative plugin.</p><p>When creating our <a target="_blank" href="https://www.npmjs.com/package/@hellocoop/nextjs">Next.js SDK</a> for Hell, we saw an opportunity to innovate to simplify configuration even more.</p><h3 id="heading-redirect-uri-discovery">Redirect URI Discovery</h3><p>In our WordPress plug-in, we have code running in the application that knows its callback URL, which we can pass to Quickstart to be configured for the app at the Hell Developer Console.</p><p>For application development, we enable <code>localhost</code> by default which allows you, the developer, to get up and running on your own machine when starting with Hell -- but you still need to configure the <code>redirect_uri</code> for any deployments that you want to share. On modern development platforms such as Vercel, configuring the <code>redirect_uri</code> is much more complicated as each preview deployment is at a randomly generated hostname by default.</p><p>When building our <a target="_blank" href="https://hello-nextjs-sample.vercel.app/">Hell Next.js Sample</a> application that demonstrates how to use our <a target="_blank" href="https://www.npmjs.com/package/@hellocoop/nextjs"><code>@hellocoop/nextjs</code></a> npm module, we set a goal to eliminate any manual configuration requirements when running locally, and when deploying to Vercel. To simplify endpoint discovery as well as deployment, there is only one endpoint (<code>/api/hellocoop</code>) for all functionality - login, logout, and callback (<code>redirect_uri</code>). To learn the URL location of the endpoint when login is called, we send a small script back to the browser to get <code>window.location.href</code> and send it back to the endpoint. This provides the correct <code>redirect_uri</code> even when the server is behind a proxy. We then use this<code>redirect_uri</code> to create the authorization request.</p><h3 id="heading-hello-https">Hell <code>https://*</code></h3><p>Discovering the <code>redirect_uri</code> is only the first step. If the application is running on <code>http://localhost:*</code> Hell will let the developer through as we have enabled those <code>redirect_uri</code> values (<a target="_blank" href="https://blog.hello.dev/hello-localhost">details at Hell <code>localhost</code></a>). To enable auto-configuration, we added an option to enable any <code>https://*</code> URL for the development team.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1699918384138/5063ece9-bfdc-481d-b1de-7eef906f7644.png" alt class="image--center mx-auto" /></p><p>This allows the development team to flow through Hell for an arbitrary <code>redirect_uri</code>. The Hell Wallet appends a <code>wildcard_domain</code> query request to the response so that the <code>@hellocoop/nextjs</code> package can detect a member of the development team has used an unconfigured <code>redirect_uri</code>, and prompt them to add it to their app after logging them in. They are then taken to the Hell Developer Console where they can decide to add it as a Development or Production Redirect URI -- and the app is configured!</p><p>For those interested, here is the sequence diagram:</p><h3 id="heading-redirect-uri-auto-configuration">Redirect URI Auto-configuration</h3><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1697578609757/986bbe2c-2406-497c-a103-1f5833a1198a.png" alt class="image--center mx-auto" /></p>]]></description><link>https://blog.hello.dev/hello-auto-config</link><guid isPermaLink="true">https://blog.hello.dev/hello-auto-config</guid><category><![CDATA[hello]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[Next.js]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Mon, 13 Nov 2023 19:05:04 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1697807017441/8bf5dc1c-7df3-4605-8c21-603823d37d5e.png</cover_image></item><item><title><![CDATA[Hellō `localhost`]]></title><description><![CDATA[<p>A challenge when developing against any of the large Social Login providers such as Google is that for security reasons[1], they don't support using <code>http://localhost</code>, which makes doing local application development that uses these providers challenging.</p><p>At Hell, we strive to simplify adding identity to your applications. To enable <code>localhost</code> development, we separated redirect URIs to be either development or production. <code>http://localhost:*</code> and <code>http://127.0.0.1/*</code> are enabled by default for development redirect URIs, but are not allowed for production. Only your team[2] is enabled to flow through development redirect URIs. You can add other development redirect URIs that will similarly be limited to your team.</p><p>When you are ready to share your application with the world, add your production URI(s) to your application in the <a target="_blank" href="https://console.hello.coop">Hell Developer Console</a>.</p><p><em>[1] An attacker running a local web server on a user's machine can potentially impersonate your application.</em></p><p><em>[2] Inviting other admins and testers to your team is coming soon!</em></p>]]></description><link>https://blog.hello.dev/hello-localhost</link><guid isPermaLink="true">https://blog.hello.dev/hello-localhost</guid><category><![CDATA[OpenID Connect]]></category><category><![CDATA[localhost]]></category><category><![CDATA[hello]]></category><category><![CDATA[configuration]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Fri, 20 Oct 2023 13:01:43 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1697803875709/c29631d1-57d0-4e08-adef-882c38c7cc07.png</cover_image></item><item><title><![CDATA[Discord, GitHub, GitLab, Twitter (X) Scopes Now Supported]]></title><description><![CDATA[<p>You can now include <code>discord</code>, <code>github</code>, <code>gitlab</code>, and <code>twitter</code> in your authorization requests and Hell will ask the user to link and select the requested provider(s) to provide you with a verified claim of their identifiers on those services.</p><p>As usernames can be changed, we provide both the <code>username</code>, and the permanent <code>id</code> from the provider:</p><pre><code class="lang-json">{ <span class="hljs-comment">// ID Token payload</span>    ...    <span class="hljs-attr">"discord"</span>:{        <span class="hljs-attr">"username"</span>:<span class="hljs-string">"dickhardt"</span>,        <span class="hljs-attr">"id"</span>:<span class="hljs-string">"932454643529834567"</span>    },    ...}</code></pre><p>Try it out for yourself in the <a target="_blank" href="https://playground.hello.dev/">Hell Playground</a>!</p>]]></description><link>https://blog.hello.dev/discord-github-gitlab-twitter-x-scopes-now-supported</link><guid isPermaLink="true">https://blog.hello.dev/discord-github-gitlab-twitter-x-scopes-now-supported</guid><category><![CDATA[discord]]></category><category><![CDATA[GitHub]]></category><category><![CDATA[GitLab]]></category><category><![CDATA[Twitter]]></category><category><![CDATA[OpenID Connect]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Tue, 17 Oct 2023 18:19:09 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1697566354714/e7135720-4e7b-498a-a82d-12cb17d54aad.png</cover_image></item><item><title><![CDATA[Hellō Passkeys]]></title><description><![CDATA[<p>Not only is it Star Wars Day, but it is also International Password Day. Expect lots of announcements about passkeys today as the prevailing wisdom is that the best password is no password, and passkeys have emerged as the shiny new replacement.</p><p>Despite all the media coverage and promotion by Apple, Google, and Microsoft, passkey adoption is still low. While migrating from usernames and passwords to usernames and passkeys is fairly straightforward, many sites also support social login, and adding passkeys is adding yet another way to log in - and unlike social login where the developer gets profile data - passkeys only provide authentication.</p><p>We implemented WebAuthn (the W3C standard for passkeys) a year ago but did not release it as the experience had many sharp edges in corner cases. After several iterations, we are now testing out using passkeys only on mobile devices. Passkeys are not a preferred provider, but a faster way to log into Hell once you have logged into your device with your preferred provider. Passkeys really shine on mobile devices where a biometric is common, and if you have multiple mobile devices they can be synced across them.</p><p>When starting a flow from a social app, or linking a social account on mobile, the browser redirect is often stuck in the social app's in-app browser where your preferred provider no longer has access to its cookies, leading to a frustrating experience as the social provider is starting log in from scratch. Passkeys are available in some in-app browsers allowing for a simple and fast Hell experience compared to using your preferred provider.</p><p>The experience is not quite where we would like to be though as the API does not provide an affordance for us to check if you have a Hell passkey before calling the API. If we have a cookie - which we won't in an in-app browser we have not been in - we know you have a passkey and can prompt you to use it right away. If we don't have a cookie, you will need to choose to use your Hell Passkey explicitly if you have created one.</p><p>Our enrollment experience prompts you to create a Hell Passkey after you have logged in with your preferred provider if you are on a mobile device. If you create one, then you can use it on any mobile device it is synced to. Continuing our philosophy of giving you control over your identity, you can decline to create a passkey or ask us to remind you later.</p><p>Passkeys are a step function in user security and convenience. We hope you enjoy using them with Hell, and we also hope the APIs evolve to smooth out the rough edges.</p>]]></description><link>https://blog.hello.dev/hello-passkeys</link><guid isPermaLink="true">https://blog.hello.dev/hello-passkeys</guid><category><![CDATA[passwords]]></category><category><![CDATA[Passwordless]]></category><category><![CDATA[passkeys]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Thu, 04 May 2023 15:53:49 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1683213126135/112d8801-cfc4-4082-b731-89351a0f2bf4.png</cover_image></item><item><title><![CDATA[Recommended Providers now Available]]></title><description><![CDATA[<p>As we have added to our list of login providers, new users were starting to get overwhelmed with all the options:</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266029703/21ccd31d-f216-4e16-8bbf-a61b7b51d1d6.png" alt class="image--center mx-auto" /></p><p>To address this issue, we start the experience for new users with a small list of recommended providers. We selected the defaults based on which providers users chose.</p><p>On iOS/MacOS devices, users are presented with:</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266052958/2b2e1baa-f6a8-4a44-8b49-43a6ecfb6456.png" alt class="image--center mx-auto" /></p><p>On Windows devices, users are presented with:</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266061874/535aaac6-3b32-4965-ac62-14c61d30b178.png" alt class="image--center mx-auto" /></p><p>And all other devices, users are presented with:</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266072640/0f5706dc-4634-48e9-bc8b-0da1b347965a.png" alt class="image--center mx-auto" /></p><p>Users can show all the other login provider choices</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266975664/d84f8b3b-afa3-429b-b6f4-5ad2678f41e6.png" alt class="image--center mx-auto" /></p><h3 id="heading-customizing-the-recommended-login-providers-for-your-users">Customizing the Recommended Login Providers for Your Users</h3><p>With this update, you can override which providers are recommended to your users by setting the <code>provider_hint</code> query parameter in the authorization URL. For example, if you want to add GitHub and remove email and Apple from the choices, you would pass</p><pre><code class="lang-plaintext">https://wallet.hello.coop/authorize?{...}&amp;provider_hint=github+email--+apple--</code></pre><p>For details see the <code>provider_hint</code> <a target="_blank" href="https://www.hello.dev/documentation/provider-hint.html">documentation</a></p><p>New users would then be presented with the following options:</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1677266377895/f6994cb6-a7c9-430d-ab91-3fbb43cae2e8.png" alt class="image--center mx-auto" /></p><p>You can check out how <code>provider_hint</code> works with the <a target="_blank" href="https://playground.hello.dev/">Hell Playground</a></p><hr /><p>Start building your next app with <a target="_blank" href="https://www.hello.dev/">Hell</a></p>]]></description><link>https://blog.hello.dev/recommended-providers-now-available</link><guid isPermaLink="true">https://blog.hello.dev/recommended-providers-now-available</guid><category><![CDATA[login]]></category><category><![CDATA[SSO]]></category><category><![CDATA[Identity]]></category><dc:creator><![CDATA[Rohan Harikumar]]></dc:creator><pubDate>Fri, 24 Feb 2023 19:30:27 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1677843953610/423ba789-8dff-4b1e-a675-585df5a89c20.png</cover_image></item></channel></rss>