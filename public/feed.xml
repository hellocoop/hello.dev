<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:hashnode="https://hashnode.com/rss"><channel><title><![CDATA[Hellō World]]></title><description><![CDATA[Hellō - Identity in minutes, not hours or days.
]]></description><link>https://blog.hello.dev</link><generator>RSS for Node</generator><lastBuildDate>Tue, 31 Dec 2024 12:31:58 GMT</lastBuildDate><atom:link href="https://blog.hello.dev/rss.xml" rel="self" type="application/rss+xml"/><language><![CDATA[en]]></language><ttl>60</ttl><atom:link rel="next" href="https://blog.hello.dev/rss.xml?page=2"/><atom:link rel="previous" href="https://blog.hello.dev/rss.xml"/><item><title><![CDATA[Introducing the "org" claim]]></title><description><![CDATA[With the release of our B2B SaaS functionality, we needed a mechanism to communicate which organization a user belongs to. A domain name is a common human memorable identifier for an organization, just like email is for a user. But it has similar iss...]]></description><link>https://blog.hello.dev/introducing-the-org-claim</link><guid isPermaLink="true">https://blog.hello.dev/introducing-the-org-claim</guid><category><![CDATA[SSO]]></category><category><![CDATA[SaaS]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Mon, 11 Nov 2024 13:02:36 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;With the release of our &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.coop/?p=316&quot;&gt;B2B SaaS functionality&lt;/a&gt;, we needed a mechanism to communicate which organization a user belongs to. A domain name is a common human memorable identifier for an organization, just like email is for a user. But it has similar &lt;a target=&quot;_blank&quot; href=&quot;https://learn.microsoft.com/en-us/entra/identity-platform/migrate-off-email-claim-authorization&quot;&gt;issues with email&lt;/a&gt; being used as the index into a DB, but the domain is similarly useful for linking an existing org record. There are lots of other unique identifiers for organizations including DUNS, LEI, EIN, and VAT. This led us to create an &lt;code&gt;org&lt;/code&gt; claim as an object that could hold a Hell &lt;code&gt;org&lt;/code&gt; , and a domain name, and other identifiers in the future:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;org&quot;&lt;/span&gt;: {   &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;org_9yMcnK3agJyUDxOBp19gpSe8_PU1&quot;&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;&quot;domain&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello.coop&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also wanted to identify which of the claims came from the organization, and created &lt;code&gt;org_claims&lt;/code&gt; which lists which claims in the ID Token were issued by the org.&lt;/p&gt;&lt;p&gt;These new claims ( &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org_claims&lt;/code&gt; ) are included in any id_token where the user chose to use a managed account. There is nothing you need to do different as a developer, but you can take advantage of new features when making an authorization request.&lt;/p&gt;&lt;h2 id=&quot;heading-domainhint&quot;&gt;&lt;code&gt;domain_hint&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Following the lead of Microsoft and Google, we have added support for &lt;code&gt;domain_hint&lt;/code&gt; in the authorization request. This allows an application to indicate which organization they want the user to login with. This is useful for provider initiated login, as including the &lt;code&gt;domain_hint&lt;/code&gt; in the URL will signal to Hell which organization to have the user log in with. For example:&lt;/p&gt;&lt;p&gt;&lt;code&gt;https://application.example/api/hellocoop?iss=https%3A%2F%2Fissuer.hello.coop&amp;amp;domain_hint=enterprise.example&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Will start a login for a user from &lt;strong&gt;enterprise.example&lt;/strong&gt; at &lt;strong&gt;application.example&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If you dont know the organization the user belongs to, and you want to require a managed account, you can include &lt;code&gt;domain_hint=managed&lt;/code&gt; in the authorization request. Conversely, if you only want a personal account, you can include &lt;code&gt;domain_hint=personal&lt;/code&gt;. See the &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/oidc/request/#hell%C5%8D-parameters&quot;&gt;Authorization Request&lt;/a&gt; documentation for more details, or try it out in the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;.&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;With the release of our &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.coop/?p=316&quot;&gt;B2B SaaS functionality&lt;/a&gt;, we needed a mechanism to communicate which organization a user belongs to. A domain name is a common human memorable identifier for an organization, just like email is for a user. But it has similar &lt;a target=&quot;_blank&quot; href=&quot;https://learn.microsoft.com/en-us/entra/identity-platform/migrate-off-email-claim-authorization&quot;&gt;issues with email&lt;/a&gt; being used as the index into a DB, but the domain is similarly useful for linking an existing org record. There are lots of other unique identifiers for organizations including DUNS, LEI, EIN, and VAT. This led us to create an &lt;code&gt;org&lt;/code&gt; claim as an object that could hold a Hell &lt;code&gt;org&lt;/code&gt; , and a domain name, and other identifiers in the future:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;org&quot;&lt;/span&gt;: {   &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;org_9yMcnK3agJyUDxOBp19gpSe8_PU1&quot;&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;&quot;domain&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello.coop&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also wanted to identify which of the claims came from the organization, and created &lt;code&gt;org_claims&lt;/code&gt; which lists which claims in the ID Token were issued by the org.&lt;/p&gt;&lt;p&gt;These new claims ( &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;org_claims&lt;/code&gt; ) are included in any id_token where the user chose to use a managed account. There is nothing you need to do different as a developer, but you can take advantage of new features when making an authorization request.&lt;/p&gt;&lt;h2 id=&quot;heading-domainhint&quot;&gt;&lt;code&gt;domain_hint&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Following the lead of Microsoft and Google, we have added support for &lt;code&gt;domain_hint&lt;/code&gt; in the authorization request. This allows an application to indicate which organization they want the user to login with. This is useful for provider initiated login, as including the &lt;code&gt;domain_hint&lt;/code&gt; in the URL will signal to Hell which organization to have the user log in with. For example:&lt;/p&gt;&lt;p&gt;&lt;code&gt;https://application.example/api/hellocoop?iss=https%3A%2F%2Fissuer.hello.coop&amp;amp;domain_hint=enterprise.example&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Will start a login for a user from &lt;strong&gt;enterprise.example&lt;/strong&gt; at &lt;strong&gt;application.example&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If you dont know the organization the user belongs to, and you want to require a managed account, you can include &lt;code&gt;domain_hint=managed&lt;/code&gt; in the authorization request. Conversely, if you only want a personal account, you can include &lt;code&gt;domain_hint=personal&lt;/code&gt;. See the &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/oidc/request/#hell%C5%8D-parameters&quot;&gt;Authorization Request&lt;/a&gt; documentation for more details, or try it out in the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;.&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1731330023653/bf4695a6-fee5-444f-afd2-1e3555b8768a.png</hashnode:coverImage></item><item><title><![CDATA[New Hellō Identifiers]]></title><description><![CDATA[Updated July 1, 2024 - we will continue to provide UUIDv4 identifiers to our existing customers.
Identifiers are a foundational component of any computing system, and key to an identity service. At Hellō, we have:

external identifiers created by oth...]]></description><link>https://blog.hello.dev/new-hello-identifiers</link><guid isPermaLink="true">https://blog.hello.dev/new-hello-identifiers</guid><category><![CDATA[nanoid]]></category><category><![CDATA[uuid]]></category><category><![CDATA[Node.js]]></category><category><![CDATA[random numbers]]></category><category><![CDATA[identifiers]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Sun, 30 Jun 2024 20:57:15 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;&lt;strong&gt;&lt;em&gt;Updated July 1, 2024 - we will continue to provide UUIDv4 identifiers to our existing customers.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Identifiers are a foundational component of any computing system, and key to an identity service. At Hell, we have:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;external identifiers created by other systems (email address, OpenID Connect &lt;code&gt;sub&lt;/code&gt; );&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;internal identifiers used to manage relationships between objects (internal user identifier, publisher identifier); and&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;identifiers exposed to other systems (&lt;code&gt;client_id&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;jti&lt;/code&gt;, authorization code).&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We of course don&apos;t have control over external identifiers. Our requirements for our identifiers are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not Leaky&lt;/strong&gt; - we don&apos;t want the identifiers to leak information about our internal systems, or about our users. This eliminates identifiers tied to machine identity, and identifiers tied to time or being sequential in nature.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed Generation&lt;/strong&gt; - we want each instance to be able to generate its own identifiers and not have a central service bottleneck. This leads to a random identifier that has a large enough entropy that duplicates are extremely improbable.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;URL Safe&lt;/strong&gt; - we want to be able to pass the identifiers around in URLs and HTTP headers without concern of mismatched encoding, and making them easy to identify when part of a URL or HTTP header.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Widely Used&lt;/strong&gt; - we don&apos;t want to invent our own random numbers. We want a proven implementation.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The popular choice today, which is what we chose, is &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)&quot;&gt;UUID v4&lt;/a&gt;. This is what one looks like in string format:&lt;/p&gt;&lt;p&gt;&lt;code&gt;a9ab46e7-a526-43e7-9e18-458c76c2f5f4&lt;/code&gt;&lt;/p&gt;&lt;p&gt;UUIDs use a base 16 (hex) alphabet, have 32 characters, and 4 dashes for readability. The version is indicated by the digit &lt;code&gt;4&lt;/code&gt; at the start of the 3rd set. Earlier versions generated values using a combination of machine identity and time. Version 4 is random, which is much simpler to do now with modern processors. With 122 bits of entropy (6 bits are reserved for version), the odds of generating a duplicate identifier for each person on the planet is 6.04 x 10-19 (&lt;a target=&quot;_blank&quot; href=&quot;https://chatgpt.com/share/fde9a089-3bfe-41a9-8150-cbbe841cae37&quot;&gt;thanks ChatGPT&lt;/a&gt; -- note the link uses a UUID v4 identifier!).&lt;/p&gt;&lt;p&gt;We chose to use the standard string formatting for UUIDs, which are 36 characters long. While a binary format would save storage and bandwidth, simpler code wins in the era of cloud computing where Hell is deployed.&lt;/p&gt;&lt;p&gt;While UUID v4 identifiers met our security, privacy, and entropy requirements, we encountered friction working with them.&lt;/p&gt;&lt;h3 id=&quot;heading-uuids-all-look-the-same&quot;&gt;UUIDs All Look the Same&lt;/h3&gt;&lt;p&gt;While it is a feature that they are indifferentiable from each other, when writing and testing code with a bunch of different identifiers in the same system, we don&apos;t know what the identifier represents. We use DynamoDB and the recommended single table architecture, so we have a mix of record types all in the same index, and we added a &lt;code&gt;type&lt;/code&gt; property to help, but we are then looking in multiple locations. I had seen some implementations prefixing UUIDs with the identifier type, and appreciated how it simplified development.&lt;/p&gt;&lt;p&gt;We chose a set of 3 character prefixes that indicate at a glance the identifier type. Our initial set:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Wallet created&lt;/span&gt;{  &lt;span class=&quot;hljs-attr&quot;&gt;usr&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell internal user identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;hdi&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell directed identifier - sub value in ID token&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;jti&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID Token jti&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;kid&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell key identifier in ID Token header&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;ses&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell session identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;dvc&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell device cookie identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;inv&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell invitation identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;pky&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell passkey identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;pic&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell picture identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;non&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell nonce identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;cod&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hell authorization code&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// Admin created&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;pub&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell publisher identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;app&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell application identifier (client_id)&apos;&lt;/span&gt;,}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;heading-dashes-suck-when-selecting-text&quot;&gt;Dashes Suck When Selecting Text&lt;/h3&gt;&lt;p&gt;A common task is to select an identifier to be copied and then pasted somewhere else. When double clicking on a string, editors, browsers, and terminals will select the word being clicked, and most editors consider a dash to be a word separator, so only part of the identifier is selected (try it out):&lt;/p&gt;&lt;p&gt;&apos;a9ab46e7-a526-&lt;mark&gt;43e7&lt;/mark&gt;-9e18-458c76c2f5f4&apos;&lt;/p&gt;&lt;p&gt;Triple clicking will often increase the selection, but then the quotes are included in the selection, which is often not what is desired:&lt;/p&gt;&lt;p&gt;&lt;mark&gt;&apos;a9ab46e7-a526-43e7-9e18-458c76c2f5f4&apos;&lt;/mark&gt;&lt;/p&gt;&lt;p&gt;This led us on a search for an alternative random number generator that met our requirements and we came across &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/ai/nanoid&quot;&gt;nanoids&lt;/a&gt;, which are shorter, and allow a custom alphabet. We chose 0-9a-zA-Z as the alphabet, the underscore as a separator. While base62 is not a nice neat power of 2, using only alphanumeric characters as the custom alphabet reduces the cognitive dissonance glancing at them.&lt;/p&gt;&lt;h3 id=&quot;heading-uuids-are-hard-to-visually-correlate&quot;&gt;UUIDs are Hard to Visually Correlate&lt;/h3&gt;&lt;p&gt;UUIDs start with an 8 char string, and end with a 12 char string. When looking at a set of identifiers, either in a column or across variables while debugging, it is difficult to identify if an identifier is the same at a glance. Using just the first digit has a 1 in 16 chance of collision. Using the first two digits has a 1 in 256 chance of collision - low enough to cause confusion. Visually selecting more than two digits without a separator was challenging.&lt;/p&gt;&lt;p&gt;As we were now prefixing our identifiers, a short suffix with enough entropy for quick visual correlation appeared a good solution. Two digits of base 62 is 1 in 3,844. Three digits is 1 in 238,328. This leads us to an identifier that looks something like:&lt;/p&gt;&lt;p&gt;&lt;code&gt;typ_0123456789abcdefABCDEF_xyz&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This jumps out as one of our identifiers, we know at a glance the type, and the suffix is easy to use to match another variable value across contexts.&lt;/p&gt;&lt;h3 id=&quot;heading-other-design-factors&quot;&gt;Other Design Factors&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Identifier Validation:&lt;/strong&gt; Being able to programmatically test if an identifier is valid can be useful in detect errors in a system. Having a consistent length, format, and character set can detect if something is not an identifier. The type prefix helps detect if identifiers got mixed up. Why not add in a checksum as well?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Identifier Length:&lt;/strong&gt; A nanoid using a 62 character alphabet only needs to be 22 characters long to exceed the entropy of a UUID. While we were ok with making the computer work harder with a 62 alphabet instead of 64, we wanted an easy to remember length. With a 4 character prefix, and an underscore separating the suffix, that gave us 27 characters. 32 is easier for programmers to remember, and a 24 character random string is also easy to remember, allowing us to use the 3 character suffix as a checksum.&lt;/p&gt;&lt;h2 id=&quot;heading-new-hello-identifiers&quot;&gt;New Hell Identifiers&lt;/h2&gt;&lt;p&gt;Here is an example of a column of our new identifiers in a:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-plaintext&quot;&gt;app_JbkuwjnRPIxuerq765q4IOXO_rc2sub_To8aelKK5rOpeLesEJA0VawX_TW7app_Cd5iWmdENXTYqJw6o07FuRKn_pUMpub_PDOzPRqBuZjBcrfG9oh4M0oN_3qFapp_Zpa1TgesIRna5nDKtWMp11cV_jlHsub_76t2ITgp6wRMBcyHhgUOM2pQ_v7Aapp_wcmPSIaiPuLtCa8Yp0Iwhwfm_IACpub_PDOzPRqBuZjBcrfG9oh4M0oN_3qFapp_FAZ9eZ8NgtauhQp5bnXXE1W1_oi3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We know these are our identifiers at a glance. We can see they are the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;pub&lt;/code&gt; types. We can quickly find the two &lt;code&gt;pub&lt;/code&gt; identifiers, and see they (likely) have the same value with the &lt;code&gt;3qF&lt;/code&gt; suffix. We are finding it useful, and hope that they also help our customers when working with our identifiers. And a double click on the value selects the whole value!&lt;/p&gt;&lt;h3 id=&quot;heading-deployment-considerations&quot;&gt;Deployment Considerations&lt;/h3&gt;&lt;p&gt;All of our identifiers are opaque strings as far as the logic is concerned. The only logic requirement is that they are a string and are unique in the system. This allows us to change the identifier format without any impact on the logic, or our customers.&lt;/p&gt;&lt;p&gt;While we already have UUID identifiers being used in production by our customers, our objective is to help us when doing development and testing.&lt;/p&gt;&lt;p&gt;How about the change in performance? I did a little test of 1M generations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;45 ms for UUIDv4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;160 ms for a standard 21 char nanoid&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;360 ms for a 27 char nanoid with custom alphabet&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;470 ms for a 24 char nanoid and 3 digit checksum&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I was surprised how much slower nanoid was compared to UUID, but then again, the UUID is now native code in node. The custom alphabet and checksum tripled the time over the default nanoid, and a 10X change over UUID. Worse than I had hoped, but the impact on user experience is irrelevant as each one takes half a nanosecond.&lt;/p&gt;&lt;p&gt;Even though we don&apos;t expect there to be any customer impact, we will hold off deployment until we have informed our customers and received any feedback.&lt;/p&gt;&lt;p&gt;We have made our library open source and available at:&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hellocoop/packages/tree/main/identifier&quot;&gt;https://github.com/hellocoop/packages&lt;/a&gt;&lt;/p&gt;&lt;p&gt;and available as an npm package as &lt;code&gt;@hellocoop/identifiers&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The build process is somewhat of a hack, but that is another story about wanting to support both CommonJS and ECMA Script modules, and have a single source of truth for our list of identifier types.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Updated July 1, 2024 - we will continue to provide UUIDv4 identifiers to our existing customers.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A few of our customers implementations take advantage of the &lt;code&gt;sub&lt;/code&gt; in the ID Token being a UUID and have configured their DB schema accordingly. Our data model has directed users (the &lt;code&gt;sub&lt;/code&gt; in the ID Token) belonging to publishers, and applications (&lt;code&gt;client_id&lt;/code&gt; for developer, and &lt;code&gt;aud&lt;/code&gt; in the ID Token) belonging to publishers.&lt;/p&gt;&lt;p&gt;Any existing publishers (that have a UUID identifier), or any new ones created that check a box to use UUIDs, will continue to use UUIDs and won&apos;t receive the new identifiers. Any publisher that has an the new format, will have all their user and application identifiers in the new format, providing consistency in the identifier format.&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;&lt;strong&gt;&lt;em&gt;Updated July 1, 2024 - we will continue to provide UUIDv4 identifiers to our existing customers.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Identifiers are a foundational component of any computing system, and key to an identity service. At Hell, we have:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;external identifiers created by other systems (email address, OpenID Connect &lt;code&gt;sub&lt;/code&gt; );&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;internal identifiers used to manage relationships between objects (internal user identifier, publisher identifier); and&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;identifiers exposed to other systems (&lt;code&gt;client_id&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;jti&lt;/code&gt;, authorization code).&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We of course don&apos;t have control over external identifiers. Our requirements for our identifiers are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not Leaky&lt;/strong&gt; - we don&apos;t want the identifiers to leak information about our internal systems, or about our users. This eliminates identifiers tied to machine identity, and identifiers tied to time or being sequential in nature.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed Generation&lt;/strong&gt; - we want each instance to be able to generate its own identifiers and not have a central service bottleneck. This leads to a random identifier that has a large enough entropy that duplicates are extremely improbable.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;URL Safe&lt;/strong&gt; - we want to be able to pass the identifiers around in URLs and HTTP headers without concern of mismatched encoding, and making them easy to identify when part of a URL or HTTP header.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Widely Used&lt;/strong&gt; - we don&apos;t want to invent our own random numbers. We want a proven implementation.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The popular choice today, which is what we chose, is &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)&quot;&gt;UUID v4&lt;/a&gt;. This is what one looks like in string format:&lt;/p&gt;&lt;p&gt;&lt;code&gt;a9ab46e7-a526-43e7-9e18-458c76c2f5f4&lt;/code&gt;&lt;/p&gt;&lt;p&gt;UUIDs use a base 16 (hex) alphabet, have 32 characters, and 4 dashes for readability. The version is indicated by the digit &lt;code&gt;4&lt;/code&gt; at the start of the 3rd set. Earlier versions generated values using a combination of machine identity and time. Version 4 is random, which is much simpler to do now with modern processors. With 122 bits of entropy (6 bits are reserved for version), the odds of generating a duplicate identifier for each person on the planet is 6.04 x 10-19 (&lt;a target=&quot;_blank&quot; href=&quot;https://chatgpt.com/share/fde9a089-3bfe-41a9-8150-cbbe841cae37&quot;&gt;thanks ChatGPT&lt;/a&gt; -- note the link uses a UUID v4 identifier!).&lt;/p&gt;&lt;p&gt;We chose to use the standard string formatting for UUIDs, which are 36 characters long. While a binary format would save storage and bandwidth, simpler code wins in the era of cloud computing where Hell is deployed.&lt;/p&gt;&lt;p&gt;While UUID v4 identifiers met our security, privacy, and entropy requirements, we encountered friction working with them.&lt;/p&gt;&lt;h3 id=&quot;heading-uuids-all-look-the-same&quot;&gt;UUIDs All Look the Same&lt;/h3&gt;&lt;p&gt;While it is a feature that they are indifferentiable from each other, when writing and testing code with a bunch of different identifiers in the same system, we don&apos;t know what the identifier represents. We use DynamoDB and the recommended single table architecture, so we have a mix of record types all in the same index, and we added a &lt;code&gt;type&lt;/code&gt; property to help, but we are then looking in multiple locations. I had seen some implementations prefixing UUIDs with the identifier type, and appreciated how it simplified development.&lt;/p&gt;&lt;p&gt;We chose a set of 3 character prefixes that indicate at a glance the identifier type. Our initial set:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// Wallet created&lt;/span&gt;{  &lt;span class=&quot;hljs-attr&quot;&gt;usr&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell internal user identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;hdi&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell directed identifier - sub value in ID token&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;jti&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID Token jti&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;kid&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell key identifier in ID Token header&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;ses&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell session identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;dvc&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell device cookie identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;inv&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell invitation identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;pky&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell passkey identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;pic&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell picture identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;non&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell nonce identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;cod&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hell authorization code&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// Admin created&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;pub&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell publisher identifier&apos;&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;app&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hell application identifier (client_id)&apos;&lt;/span&gt;,}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;heading-dashes-suck-when-selecting-text&quot;&gt;Dashes Suck When Selecting Text&lt;/h3&gt;&lt;p&gt;A common task is to select an identifier to be copied and then pasted somewhere else. When double clicking on a string, editors, browsers, and terminals will select the word being clicked, and most editors consider a dash to be a word separator, so only part of the identifier is selected (try it out):&lt;/p&gt;&lt;p&gt;&apos;a9ab46e7-a526-&lt;mark&gt;43e7&lt;/mark&gt;-9e18-458c76c2f5f4&apos;&lt;/p&gt;&lt;p&gt;Triple clicking will often increase the selection, but then the quotes are included in the selection, which is often not what is desired:&lt;/p&gt;&lt;p&gt;&lt;mark&gt;&apos;a9ab46e7-a526-43e7-9e18-458c76c2f5f4&apos;&lt;/mark&gt;&lt;/p&gt;&lt;p&gt;This led us on a search for an alternative random number generator that met our requirements and we came across &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/ai/nanoid&quot;&gt;nanoids&lt;/a&gt;, which are shorter, and allow a custom alphabet. We chose 0-9a-zA-Z as the alphabet, the underscore as a separator. While base62 is not a nice neat power of 2, using only alphanumeric characters as the custom alphabet reduces the cognitive dissonance glancing at them.&lt;/p&gt;&lt;h3 id=&quot;heading-uuids-are-hard-to-visually-correlate&quot;&gt;UUIDs are Hard to Visually Correlate&lt;/h3&gt;&lt;p&gt;UUIDs start with an 8 char string, and end with a 12 char string. When looking at a set of identifiers, either in a column or across variables while debugging, it is difficult to identify if an identifier is the same at a glance. Using just the first digit has a 1 in 16 chance of collision. Using the first two digits has a 1 in 256 chance of collision - low enough to cause confusion. Visually selecting more than two digits without a separator was challenging.&lt;/p&gt;&lt;p&gt;As we were now prefixing our identifiers, a short suffix with enough entropy for quick visual correlation appeared a good solution. Two digits of base 62 is 1 in 3,844. Three digits is 1 in 238,328. This leads us to an identifier that looks something like:&lt;/p&gt;&lt;p&gt;&lt;code&gt;typ_0123456789abcdefABCDEF_xyz&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This jumps out as one of our identifiers, we know at a glance the type, and the suffix is easy to use to match another variable value across contexts.&lt;/p&gt;&lt;h3 id=&quot;heading-other-design-factors&quot;&gt;Other Design Factors&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Identifier Validation:&lt;/strong&gt; Being able to programmatically test if an identifier is valid can be useful in detect errors in a system. Having a consistent length, format, and character set can detect if something is not an identifier. The type prefix helps detect if identifiers got mixed up. Why not add in a checksum as well?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Identifier Length:&lt;/strong&gt; A nanoid using a 62 character alphabet only needs to be 22 characters long to exceed the entropy of a UUID. While we were ok with making the computer work harder with a 62 alphabet instead of 64, we wanted an easy to remember length. With a 4 character prefix, and an underscore separating the suffix, that gave us 27 characters. 32 is easier for programmers to remember, and a 24 character random string is also easy to remember, allowing us to use the 3 character suffix as a checksum.&lt;/p&gt;&lt;h2 id=&quot;heading-new-hello-identifiers&quot;&gt;New Hell Identifiers&lt;/h2&gt;&lt;p&gt;Here is an example of a column of our new identifiers in a:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-plaintext&quot;&gt;app_JbkuwjnRPIxuerq765q4IOXO_rc2sub_To8aelKK5rOpeLesEJA0VawX_TW7app_Cd5iWmdENXTYqJw6o07FuRKn_pUMpub_PDOzPRqBuZjBcrfG9oh4M0oN_3qFapp_Zpa1TgesIRna5nDKtWMp11cV_jlHsub_76t2ITgp6wRMBcyHhgUOM2pQ_v7Aapp_wcmPSIaiPuLtCa8Yp0Iwhwfm_IACpub_PDOzPRqBuZjBcrfG9oh4M0oN_3qFapp_FAZ9eZ8NgtauhQp5bnXXE1W1_oi3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We know these are our identifiers at a glance. We can see they are the &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;pub&lt;/code&gt; types. We can quickly find the two &lt;code&gt;pub&lt;/code&gt; identifiers, and see they (likely) have the same value with the &lt;code&gt;3qF&lt;/code&gt; suffix. We are finding it useful, and hope that they also help our customers when working with our identifiers. And a double click on the value selects the whole value!&lt;/p&gt;&lt;h3 id=&quot;heading-deployment-considerations&quot;&gt;Deployment Considerations&lt;/h3&gt;&lt;p&gt;All of our identifiers are opaque strings as far as the logic is concerned. The only logic requirement is that they are a string and are unique in the system. This allows us to change the identifier format without any impact on the logic, or our customers.&lt;/p&gt;&lt;p&gt;While we already have UUID identifiers being used in production by our customers, our objective is to help us when doing development and testing.&lt;/p&gt;&lt;p&gt;How about the change in performance? I did a little test of 1M generations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;45 ms for UUIDv4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;160 ms for a standard 21 char nanoid&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;360 ms for a 27 char nanoid with custom alphabet&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;470 ms for a 24 char nanoid and 3 digit checksum&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I was surprised how much slower nanoid was compared to UUID, but then again, the UUID is now native code in node. The custom alphabet and checksum tripled the time over the default nanoid, and a 10X change over UUID. Worse than I had hoped, but the impact on user experience is irrelevant as each one takes half a nanosecond.&lt;/p&gt;&lt;p&gt;Even though we don&apos;t expect there to be any customer impact, we will hold off deployment until we have informed our customers and received any feedback.&lt;/p&gt;&lt;p&gt;We have made our library open source and available at:&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hellocoop/packages/tree/main/identifier&quot;&gt;https://github.com/hellocoop/packages&lt;/a&gt;&lt;/p&gt;&lt;p&gt;and available as an npm package as &lt;code&gt;@hellocoop/identifiers&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The build process is somewhat of a hack, but that is another story about wanting to support both CommonJS and ECMA Script modules, and have a single source of truth for our list of identifier types.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Updated July 1, 2024 - we will continue to provide UUIDv4 identifiers to our existing customers.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A few of our customers implementations take advantage of the &lt;code&gt;sub&lt;/code&gt; in the ID Token being a UUID and have configured their DB schema accordingly. Our data model has directed users (the &lt;code&gt;sub&lt;/code&gt; in the ID Token) belonging to publishers, and applications (&lt;code&gt;client_id&lt;/code&gt; for developer, and &lt;code&gt;aud&lt;/code&gt; in the ID Token) belonging to publishers.&lt;/p&gt;&lt;p&gt;Any existing publishers (that have a UUID identifier), or any new ones created that check a box to use UUIDs, will continue to use UUIDs and won&apos;t receive the new identifiers. Any publisher that has an the new format, will have all their user and application identifiers in the new format, providing consistency in the identifier format.&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/stock/unsplash/VMKBFR6r_jg/upload/581fc88ffadf3f535c8db2dfbd284868.jpeg</hashnode:coverImage></item><item><title><![CDATA[Hellō in 60 Seconds]]></title><description><![CDATA[Tl;dr: Test drive the sample code https://github.com/hellocoop/hello-nextjs-sample/
In the video below, we walk through test-driving the sample repo:

Fork & clone the repo

Install the packages

Run Quickstart to create the app at Hellō

Start the a...]]></description><link>https://blog.hello.dev/hello-in-60-seconds</link><guid isPermaLink="true">https://blog.hello.dev/hello-in-60-seconds</guid><category><![CDATA[Hello World]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[OAuth2]]></category><category><![CDATA[Next.js]]></category><category><![CDATA[nextauth.js]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Wed, 15 Nov 2023 16:46:19 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;Tl;dr: Test drive the sample code &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hellocoop/hello-nextjs-sample/&quot;&gt;https://github.com/hellocoop/hello-nextjs-sample/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the video below, we walk through test-driving the sample repo:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Fork &amp;amp; clone the repo&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Install the packages&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run Quickstart to create the app at Hell&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Start the app and log in with Hell locally&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Deploy the app to Vercel&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Log in with Hell to the host dynamically generated by Vercel&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Click through auto config to add the Redirect URI to the Hell Developer Console&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We then add Hell to one of the &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds&quot;&gt;Next.js sample apps&lt;/a&gt; per this post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Create a local copy of the blog sample app&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Install the packages&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run Quickstart to create an app at Hell&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Copy over the &lt;code&gt;hello-test.jsx&lt;/code&gt; file&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Start the app with &lt;code&gt;/hello-test&lt;/code&gt; and login with Hell&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;embed-wrapper&quot;&gt;&lt;div class=&quot;embed-loading&quot;&gt;&lt;div class=&quot;loadingRow&quot;&gt;&lt;/div&gt;&lt;div class=&quot;loadingRow&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;a class=&quot;embed-card&quot; href=&quot;https://www.youtube.com/watch?v=-5Dc9CVxeU4&quot;&gt;https://www.youtube.com/watch?v=-5Dc9CVxeU4&lt;/a&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Note the pointer to the clock so you can see the true elapsed time!&lt;/p&gt;&lt;p&gt;See the &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/hello-auto-config&quot;&gt;blog post on auto config&lt;/a&gt; if you want to dive in deeper, complete with a sequence diagram.&lt;/p&gt;&lt;p&gt;Let us know your thoughts in the comments below!&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;Tl;dr: Test drive the sample code &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hellocoop/hello-nextjs-sample/&quot;&gt;https://github.com/hellocoop/hello-nextjs-sample/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the video below, we walk through test-driving the sample repo:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Fork &amp;amp; clone the repo&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Install the packages&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run Quickstart to create the app at Hell&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Start the app and log in with Hell locally&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Deploy the app to Vercel&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Log in with Hell to the host dynamically generated by Vercel&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Click through auto config to add the Redirect URI to the Hell Developer Console&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We then add Hell to one of the &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds&quot;&gt;Next.js sample apps&lt;/a&gt; per this post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Create a local copy of the blog sample app&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Install the packages&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run Quickstart to create an app at Hell&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Copy over the &lt;code&gt;hello-test.jsx&lt;/code&gt; file&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Start the app with &lt;code&gt;/hello-test&lt;/code&gt; and login with Hell&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;embed-wrapper&quot;&gt;&lt;div class=&quot;embed-loading&quot;&gt;&lt;div class=&quot;loadingRow&quot;&gt;&lt;/div&gt;&lt;div class=&quot;loadingRow&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;a class=&quot;embed-card&quot; href=&quot;https://www.youtube.com/watch?v=-5Dc9CVxeU4&quot;&gt;https://www.youtube.com/watch?v=-5Dc9CVxeU4&lt;/a&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Note the pointer to the clock so you can see the true elapsed time!&lt;/p&gt;&lt;p&gt;See the &lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/hello-auto-config&quot;&gt;blog post on auto config&lt;/a&gt; if you want to dive in deeper, complete with a sequence diagram.&lt;/p&gt;&lt;p&gt;Let us know your thoughts in the comments below!&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1700003230112/086509af-bfff-4e8e-9368-f7550dd1afa8.png</hashnode:coverImage></item><item><title><![CDATA[Add Hellō to any Next.js App in seconds]]></title><description><![CDATA[In our mission to reduce developer friction, we looked at what we could do to simplify adding Hellō to your app.
Running the commands below will create a Next.js sample app, add Hellō, and open up a sample page for you to log in -- try it out!
To add...]]></description><link>https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds</link><guid isPermaLink="true">https://blog.hello.dev/add-hello-to-any-nextjs-app-in-seconds</guid><category><![CDATA[Next.js]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[Hello World]]></category><category><![CDATA[authentication]]></category><category><![CDATA[SSO]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Tue, 14 Nov 2023 20:20:03 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;In our mission to reduce developer friction, we looked at what we could do to simplify adding Hell to your app.&lt;/p&gt;&lt;p&gt;Running the commands below will create a Next.js sample app, add Hell, and open up a sample page for you to log in -- try it out!&lt;/p&gt;&lt;p&gt;To add Hell to your app, &lt;code&gt;cd&lt;/code&gt; to your project directory, and skip the first two steps.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npx create-next-app@latest nextjs-blog --use-npm --example \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://github.com/vercel/next-learn/tree/main/basics/learn-starter&quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; nextjs-blognpm i --save @hellocoop/nextjs npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli curl -f https://raw.githubusercontent.com/hellocoop/hello.dev/main/samples/nextjs/hello-test.jsx \    &amp;gt; ./pages/hello-test.jsxnpx @hellocoop/quickstart --nextjsnpx concurrently \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;PORT=3210 npm run dev&quot;&lt;/span&gt; \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;wait-on http://localhost:3210 &amp;amp;&amp;amp; open-cli \&quot;http://localhost:3210/hello-test\&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npx create-next-app@latest nextjs-blog --use-npm --example \ &quot;https://github.com/vercel/next-learn/tree/main/basics/learn-starter&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt; creates a sample Next.js app in the &lt;code&gt;nextjs-blog&lt;/code&gt; directory. If you have your own app you want to add Hell to, you can skip this step.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Change to the project directory.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save @hellocoop/nextjs&lt;/code&gt; installs all the project packages and the &lt;code&gt;@hellocoop/nextjs&lt;/code&gt; package&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli&lt;/code&gt; installs npm CLI packages for this demo. See below for how they are used.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;curl ... &amp;gt; ./pages/hello-test.jsx&lt;/code&gt; copies a test file from the &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/sdks/nextjs&quot;&gt;hello.dev docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npx @hellocoop/quickstart --nextjs&lt;/code&gt; will:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;start a local webserver and prompt to open a browser;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;you will then log in to Hell and be prompted on what to name your application or select an existing application;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;client_id&lt;/code&gt; for the application will be returned and written to the &lt;code&gt;hello.config.js&lt;/code&gt; file in the root of your project; and&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;a &lt;code&gt;HELLO_COOKIE_SECRET&lt;/code&gt; will be generated and written to &lt;code&gt;.env.local&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt; will start your server, &lt;code&gt;wait-on&lt;/code&gt; will wait for it to start, and then&lt;code&gt;open-cli&lt;/code&gt; will load the test file.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note that we are not React or Next.js experts! We are identity and security experts. Any feedback or suggestions on improving our React and Next.js packages would be appreciated!&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;In our mission to reduce developer friction, we looked at what we could do to simplify adding Hell to your app.&lt;/p&gt;&lt;p&gt;Running the commands below will create a Next.js sample app, add Hell, and open up a sample page for you to log in -- try it out!&lt;/p&gt;&lt;p&gt;To add Hell to your app, &lt;code&gt;cd&lt;/code&gt; to your project directory, and skip the first two steps.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npx create-next-app@latest nextjs-blog --use-npm --example \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://github.com/vercel/next-learn/tree/main/basics/learn-starter&quot;&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; nextjs-blognpm i --save @hellocoop/nextjs npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli curl -f https://raw.githubusercontent.com/hellocoop/hello.dev/main/samples/nextjs/hello-test.jsx \    &amp;gt; ./pages/hello-test.jsxnpx @hellocoop/quickstart --nextjsnpx concurrently \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;PORT=3210 npm run dev&quot;&lt;/span&gt; \    &lt;span class=&quot;hljs-string&quot;&gt;&quot;wait-on http://localhost:3210 &amp;amp;&amp;amp; open-cli \&quot;http://localhost:3210/hello-test\&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npx create-next-app@latest nextjs-blog --use-npm --example \ &quot;https://github.com/vercel/next-learn/tree/main/basics/learn-starter&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt; creates a sample Next.js app in the &lt;code&gt;nextjs-blog&lt;/code&gt; directory. If you have your own app you want to add Hell to, you can skip this step.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Change to the project directory.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save @hellocoop/nextjs&lt;/code&gt; installs all the project packages and the &lt;code&gt;@hellocoop/nextjs&lt;/code&gt; package&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm i --save-dev @hellocoop/quickstart concurrently wait-on open-cli&lt;/code&gt; installs npm CLI packages for this demo. See below for how they are used.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;curl ... &amp;gt; ./pages/hello-test.jsx&lt;/code&gt; copies a test file from the &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/sdks/nextjs&quot;&gt;hello.dev docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npx @hellocoop/quickstart --nextjs&lt;/code&gt; will:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;start a local webserver and prompt to open a browser;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;you will then log in to Hell and be prompted on what to name your application or select an existing application;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;code&gt;client_id&lt;/code&gt; for the application will be returned and written to the &lt;code&gt;hello.config.js&lt;/code&gt; file in the root of your project; and&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;a &lt;code&gt;HELLO_COOKIE_SECRET&lt;/code&gt; will be generated and written to &lt;code&gt;.env.local&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt; will start your server, &lt;code&gt;wait-on&lt;/code&gt; will wait for it to start, and then&lt;code&gt;open-cli&lt;/code&gt; will load the test file.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note that we are not React or Next.js experts! We are identity and security experts. Any feedback or suggestions on improving our React and Next.js packages would be appreciated!&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1699827119462/987b7391-9cb3-4f9a-aecb-e28eb1b4cebe.png</hashnode:coverImage></item><item><title><![CDATA[Hellō Auto Config]]></title><description><![CDATA[Next.js Auth in a few minutes]]></description><link>https://blog.hello.dev/hello-auto-config</link><guid isPermaLink="true">https://blog.hello.dev/hello-auto-config</guid><category><![CDATA[hello]]></category><category><![CDATA[OpenID Connect]]></category><category><![CDATA[Next.js]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Mon, 13 Nov 2023 19:05:04 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;I have configured the popular social login providers for numerous applications over the years. Despite knowing a few &lt;a target=&quot;_blank&quot; href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;things&lt;/a&gt; about &lt;a target=&quot;_blank&quot; href=&quot;https://youtu.be/JzuCE7lDYrM&quot;&gt;identity&lt;/a&gt;, I find the configuration process tedious and confusing, and when talking to other developers, they have similar complaints.&lt;/p&gt;&lt;p&gt;We strive to simplify login and registration at Hell, and question why you need deep expertise in OAuth and OpenID Connect to use social login. How can we help you get up and running quickly so you can decide if Hell is the right solution for you? This question led us to not require you to start your journey with the Hell Developer Console, but with a simplified initial experience that creates a basic application for you.&lt;/p&gt;&lt;h3 id=&quot;heading-hello-quickstart&quot;&gt;Hell Quickstart&lt;/h3&gt;&lt;p&gt;Our first use of Quickstart was with &lt;a target=&quot;_blank&quot; href=&quot;https://wordpress.org/plugins/hello-login/&quot;&gt;Hell Login&lt;/a&gt;, our free WordPress plugin. You don&apos;t need to figure out your &lt;code&gt;redirect_uri&lt;/code&gt;, or copy and paste a &lt;code&gt;client_id&lt;/code&gt;. No need to manage a client secret. You don&apos;t even need to understand what those are. If your blog has a privacy policy and default image, Quickstart will configure them for you. &lt;a target=&quot;_blank&quot; href=&quot;https://www.youtube.com/watch?v=kCWY3viT368&quot;&gt;This video&lt;/a&gt; shows how Quickstart lets you add Hell to a blog and offer users all popular social login choices in 19 seconds vs 13 minutes for just Google with an alternative plugin.&lt;/p&gt;&lt;p&gt;When creating our &lt;a target=&quot;_blank&quot; href=&quot;https://www.npmjs.com/package/@hellocoop/nextjs&quot;&gt;Next.js SDK&lt;/a&gt; for Hell, we saw an opportunity to innovate to simplify configuration even more.&lt;/p&gt;&lt;h3 id=&quot;heading-redirect-uri-discovery&quot;&gt;Redirect URI Discovery&lt;/h3&gt;&lt;p&gt;In our WordPress plug-in, we have code running in the application that knows its callback URL, which we can pass to Quickstart to be configured for the app at the Hell Developer Console.&lt;/p&gt;&lt;p&gt;For application development, we enable &lt;code&gt;localhost&lt;/code&gt; by default which allows you, the developer, to get up and running on your own machine when starting with Hell -- but you still need to configure the &lt;code&gt;redirect_uri&lt;/code&gt; for any deployments that you want to share. On modern development platforms such as Vercel, configuring the &lt;code&gt;redirect_uri&lt;/code&gt; is much more complicated as each preview deployment is at a randomly generated hostname by default.&lt;/p&gt;&lt;p&gt;When building our &lt;a target=&quot;_blank&quot; href=&quot;https://hello-nextjs-sample.vercel.app/&quot;&gt;Hell Next.js Sample&lt;/a&gt; application that demonstrates how to use our &lt;a target=&quot;_blank&quot; href=&quot;https://www.npmjs.com/package/@hellocoop/nextjs&quot;&gt;&lt;code&gt;@hellocoop/nextjs&lt;/code&gt;&lt;/a&gt; npm module, we set a goal to eliminate any manual configuration requirements when running locally, and when deploying to Vercel. To simplify endpoint discovery as well as deployment, there is only one endpoint (&lt;code&gt;/api/hellocoop&lt;/code&gt;) for all functionality - login, logout, and callback (&lt;code&gt;redirect_uri&lt;/code&gt;). To learn the URL location of the endpoint when login is called, we send a small script back to the browser to get &lt;code&gt;window.location.href&lt;/code&gt; and send it back to the endpoint. This provides the correct &lt;code&gt;redirect_uri&lt;/code&gt; even when the server is behind a proxy. We then use this&lt;code&gt;redirect_uri&lt;/code&gt; to create the authorization request.&lt;/p&gt;&lt;h3 id=&quot;heading-hello-https&quot;&gt;Hell &lt;code&gt;https://*&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Discovering the &lt;code&gt;redirect_uri&lt;/code&gt; is only the first step. If the application is running on &lt;code&gt;http://localhost:*&lt;/code&gt; Hell will let the developer through as we have enabled those &lt;code&gt;redirect_uri&lt;/code&gt; values (&lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/hello-localhost&quot;&gt;details at Hell &lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt;). To enable auto-configuration, we added an option to enable any &lt;code&gt;https://*&lt;/code&gt; URL for the development team.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1699918384138/5063ece9-bfdc-481d-b1de-7eef906f7644.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;This allows the development team to flow through Hell for an arbitrary &lt;code&gt;redirect_uri&lt;/code&gt;. The Hell Wallet appends a &lt;code&gt;wildcard_domain&lt;/code&gt; query request to the response so that the &lt;code&gt;@hellocoop/nextjs&lt;/code&gt; package can detect a member of the development team has used an unconfigured &lt;code&gt;redirect_uri&lt;/code&gt;, and prompt them to add it to their app after logging them in. They are then taken to the Hell Developer Console where they can decide to add it as a Development or Production Redirect URI -- and the app is configured!&lt;/p&gt;&lt;p&gt;For those interested, here is the sequence diagram:&lt;/p&gt;&lt;h3 id=&quot;heading-redirect-uri-auto-configuration&quot;&gt;Redirect URI Auto-configuration&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1697578609757/986bbe2c-2406-497c-a103-1f5833a1198a.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;I have configured the popular social login providers for numerous applications over the years. Despite knowing a few &lt;a target=&quot;_blank&quot; href=&quot;https://datatracker.ietf.org/doc/html/rfc6749&quot;&gt;things&lt;/a&gt; about &lt;a target=&quot;_blank&quot; href=&quot;https://youtu.be/JzuCE7lDYrM&quot;&gt;identity&lt;/a&gt;, I find the configuration process tedious and confusing, and when talking to other developers, they have similar complaints.&lt;/p&gt;&lt;p&gt;We strive to simplify login and registration at Hell, and question why you need deep expertise in OAuth and OpenID Connect to use social login. How can we help you get up and running quickly so you can decide if Hell is the right solution for you? This question led us to not require you to start your journey with the Hell Developer Console, but with a simplified initial experience that creates a basic application for you.&lt;/p&gt;&lt;h3 id=&quot;heading-hello-quickstart&quot;&gt;Hell Quickstart&lt;/h3&gt;&lt;p&gt;Our first use of Quickstart was with &lt;a target=&quot;_blank&quot; href=&quot;https://wordpress.org/plugins/hello-login/&quot;&gt;Hell Login&lt;/a&gt;, our free WordPress plugin. You don&apos;t need to figure out your &lt;code&gt;redirect_uri&lt;/code&gt;, or copy and paste a &lt;code&gt;client_id&lt;/code&gt;. No need to manage a client secret. You don&apos;t even need to understand what those are. If your blog has a privacy policy and default image, Quickstart will configure them for you. &lt;a target=&quot;_blank&quot; href=&quot;https://www.youtube.com/watch?v=kCWY3viT368&quot;&gt;This video&lt;/a&gt; shows how Quickstart lets you add Hell to a blog and offer users all popular social login choices in 19 seconds vs 13 minutes for just Google with an alternative plugin.&lt;/p&gt;&lt;p&gt;When creating our &lt;a target=&quot;_blank&quot; href=&quot;https://www.npmjs.com/package/@hellocoop/nextjs&quot;&gt;Next.js SDK&lt;/a&gt; for Hell, we saw an opportunity to innovate to simplify configuration even more.&lt;/p&gt;&lt;h3 id=&quot;heading-redirect-uri-discovery&quot;&gt;Redirect URI Discovery&lt;/h3&gt;&lt;p&gt;In our WordPress plug-in, we have code running in the application that knows its callback URL, which we can pass to Quickstart to be configured for the app at the Hell Developer Console.&lt;/p&gt;&lt;p&gt;For application development, we enable &lt;code&gt;localhost&lt;/code&gt; by default which allows you, the developer, to get up and running on your own machine when starting with Hell -- but you still need to configure the &lt;code&gt;redirect_uri&lt;/code&gt; for any deployments that you want to share. On modern development platforms such as Vercel, configuring the &lt;code&gt;redirect_uri&lt;/code&gt; is much more complicated as each preview deployment is at a randomly generated hostname by default.&lt;/p&gt;&lt;p&gt;When building our &lt;a target=&quot;_blank&quot; href=&quot;https://hello-nextjs-sample.vercel.app/&quot;&gt;Hell Next.js Sample&lt;/a&gt; application that demonstrates how to use our &lt;a target=&quot;_blank&quot; href=&quot;https://www.npmjs.com/package/@hellocoop/nextjs&quot;&gt;&lt;code&gt;@hellocoop/nextjs&lt;/code&gt;&lt;/a&gt; npm module, we set a goal to eliminate any manual configuration requirements when running locally, and when deploying to Vercel. To simplify endpoint discovery as well as deployment, there is only one endpoint (&lt;code&gt;/api/hellocoop&lt;/code&gt;) for all functionality - login, logout, and callback (&lt;code&gt;redirect_uri&lt;/code&gt;). To learn the URL location of the endpoint when login is called, we send a small script back to the browser to get &lt;code&gt;window.location.href&lt;/code&gt; and send it back to the endpoint. This provides the correct &lt;code&gt;redirect_uri&lt;/code&gt; even when the server is behind a proxy. We then use this&lt;code&gt;redirect_uri&lt;/code&gt; to create the authorization request.&lt;/p&gt;&lt;h3 id=&quot;heading-hello-https&quot;&gt;Hell &lt;code&gt;https://*&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Discovering the &lt;code&gt;redirect_uri&lt;/code&gt; is only the first step. If the application is running on &lt;code&gt;http://localhost:*&lt;/code&gt; Hell will let the developer through as we have enabled those &lt;code&gt;redirect_uri&lt;/code&gt; values (&lt;a target=&quot;_blank&quot; href=&quot;https://blog.hello.dev/hello-localhost&quot;&gt;details at Hell &lt;code&gt;localhost&lt;/code&gt;&lt;/a&gt;). To enable auto-configuration, we added an option to enable any &lt;code&gt;https://*&lt;/code&gt; URL for the development team.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1699918384138/5063ece9-bfdc-481d-b1de-7eef906f7644.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;This allows the development team to flow through Hell for an arbitrary &lt;code&gt;redirect_uri&lt;/code&gt;. The Hell Wallet appends a &lt;code&gt;wildcard_domain&lt;/code&gt; query request to the response so that the &lt;code&gt;@hellocoop/nextjs&lt;/code&gt; package can detect a member of the development team has used an unconfigured &lt;code&gt;redirect_uri&lt;/code&gt;, and prompt them to add it to their app after logging them in. They are then taken to the Hell Developer Console where they can decide to add it as a Development or Production Redirect URI -- and the app is configured!&lt;/p&gt;&lt;p&gt;For those interested, here is the sequence diagram:&lt;/p&gt;&lt;h3 id=&quot;heading-redirect-uri-auto-configuration&quot;&gt;Redirect URI Auto-configuration&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1697578609757/986bbe2c-2406-497c-a103-1f5833a1198a.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1697807017441/8bf5dc1c-7df3-4605-8c21-603823d37d5e.png</hashnode:coverImage></item><item><title><![CDATA[Hellō `localhost`]]></title><description><![CDATA[A challenge when developing against any of the large Social Login providers such as Google is that for security reasons[1], they don't support using http://localhost, which makes doing local application development that uses these providers challengi...]]></description><link>https://blog.hello.dev/hello-localhost</link><guid isPermaLink="true">https://blog.hello.dev/hello-localhost</guid><category><![CDATA[OpenID Connect]]></category><category><![CDATA[localhost]]></category><category><![CDATA[hello]]></category><category><![CDATA[configuration]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Fri, 20 Oct 2023 13:01:43 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;A challenge when developing against any of the large Social Login providers such as Google is that for security reasons[1], they don&apos;t support using &lt;code&gt;http://localhost&lt;/code&gt;, which makes doing local application development that uses these providers challenging.&lt;/p&gt;&lt;p&gt;At Hell, we strive to simplify adding identity to your applications. To enable &lt;code&gt;localhost&lt;/code&gt; development, we separated redirect URIs to be either development or production. &lt;code&gt;http://localhost:*&lt;/code&gt; and &lt;code&gt;http://127.0.0.1/*&lt;/code&gt; are enabled by default for development redirect URIs, but are not allowed for production. Only your team[2] is enabled to flow through development redirect URIs. You can add other development redirect URIs that will similarly be limited to your team.&lt;/p&gt;&lt;p&gt;When you are ready to share your application with the world, add your production URI(s) to your application in the &lt;a target=&quot;_blank&quot; href=&quot;https://console.hello.coop&quot;&gt;Hell Developer Console&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;[1] An attacker running a local web server on a user&apos;s machine can potentially impersonate your application.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;[2] Inviting other admins and testers to your team is coming soon!&lt;/em&gt;&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;A challenge when developing against any of the large Social Login providers such as Google is that for security reasons[1], they don&apos;t support using &lt;code&gt;http://localhost&lt;/code&gt;, which makes doing local application development that uses these providers challenging.&lt;/p&gt;&lt;p&gt;At Hell, we strive to simplify adding identity to your applications. To enable &lt;code&gt;localhost&lt;/code&gt; development, we separated redirect URIs to be either development or production. &lt;code&gt;http://localhost:*&lt;/code&gt; and &lt;code&gt;http://127.0.0.1/*&lt;/code&gt; are enabled by default for development redirect URIs, but are not allowed for production. Only your team[2] is enabled to flow through development redirect URIs. You can add other development redirect URIs that will similarly be limited to your team.&lt;/p&gt;&lt;p&gt;When you are ready to share your application with the world, add your production URI(s) to your application in the &lt;a target=&quot;_blank&quot; href=&quot;https://console.hello.coop&quot;&gt;Hell Developer Console&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;[1] An attacker running a local web server on a user&apos;s machine can potentially impersonate your application.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;[2] Inviting other admins and testers to your team is coming soon!&lt;/em&gt;&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1697803875709/c29631d1-57d0-4e08-adef-882c38c7cc07.png</hashnode:coverImage></item><item><title><![CDATA[Discord, GitHub, GitLab, Twitter (X) Scopes Now Supported]]></title><description><![CDATA[You can now include discord, github, gitlab, and twitter in your authorization requests and Hellō will ask the user to link and select the requested provider(s) to provide you with a verified claim of their identifiers on those services.
As usernames...]]></description><link>https://blog.hello.dev/discord-github-gitlab-twitter-x-scopes-now-supported</link><guid isPermaLink="true">https://blog.hello.dev/discord-github-gitlab-twitter-x-scopes-now-supported</guid><category><![CDATA[discord]]></category><category><![CDATA[GitHub]]></category><category><![CDATA[GitLab]]></category><category><![CDATA[Twitter]]></category><category><![CDATA[OpenID Connect]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Tue, 17 Oct 2023 18:19:09 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;You can now include &lt;code&gt;discord&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, and &lt;code&gt;twitter&lt;/code&gt; in your authorization requests and Hell will ask the user to link and select the requested provider(s) to provide you with a verified claim of their identifiers on those services.&lt;/p&gt;&lt;p&gt;As usernames can be changed, we provide both the &lt;code&gt;username&lt;/code&gt;, and the permanent &lt;code&gt;id&lt;/code&gt; from the provider:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;// ID Token payload&lt;/span&gt;    ...    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;discord&quot;&lt;/span&gt;:{        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;username&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;dickhardt&quot;&lt;/span&gt;,        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;932454643529834567&quot;&lt;/span&gt;    },    ...}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try it out for yourself in the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;!&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;You can now include &lt;code&gt;discord&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, and &lt;code&gt;twitter&lt;/code&gt; in your authorization requests and Hell will ask the user to link and select the requested provider(s) to provide you with a verified claim of their identifiers on those services.&lt;/p&gt;&lt;p&gt;As usernames can be changed, we provide both the &lt;code&gt;username&lt;/code&gt;, and the permanent &lt;code&gt;id&lt;/code&gt; from the provider:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{ &lt;span class=&quot;hljs-comment&quot;&gt;// ID Token payload&lt;/span&gt;    ...    &lt;span class=&quot;hljs-attr&quot;&gt;&quot;discord&quot;&lt;/span&gt;:{        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;username&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;dickhardt&quot;&lt;/span&gt;,        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;932454643529834567&quot;&lt;/span&gt;    },    ...}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try it out for yourself in the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;!&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1697566354714/e7135720-4e7b-498a-a82d-12cb17d54aad.png</hashnode:coverImage></item><item><title><![CDATA[Hellō Passkeys]]></title><description><![CDATA[Not only is it Star Wars Day, but it is also International Password Day. Expect lots of announcements about passkeys today as the prevailing wisdom is that the best password is no password, and passkeys have emerged as the shiny new replacement.
Desp...]]></description><link>https://blog.hello.dev/hello-passkeys</link><guid isPermaLink="true">https://blog.hello.dev/hello-passkeys</guid><category><![CDATA[passwords]]></category><category><![CDATA[Passwordless]]></category><category><![CDATA[passkeys]]></category><dc:creator><![CDATA[Dick Hardt]]></dc:creator><pubDate>Thu, 04 May 2023 15:53:49 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;Not only is it Star Wars Day, but it is also International Password Day. Expect lots of announcements about passkeys today as the prevailing wisdom is that the best password is no password, and passkeys have emerged as the shiny new replacement.&lt;/p&gt;&lt;p&gt;Despite all the media coverage and promotion by Apple, Google, and Microsoft, passkey adoption is still low. While migrating from usernames and passwords to usernames and passkeys is fairly straightforward, many sites also support social login, and adding passkeys is adding yet another way to log in - and unlike social login where the developer gets profile data - passkeys only provide authentication.&lt;/p&gt;&lt;p&gt;We implemented WebAuthn (the W3C standard for passkeys) a year ago but did not release it as the experience had many sharp edges in corner cases. After several iterations, we are now testing out using passkeys only on mobile devices. Passkeys are not a preferred provider, but a faster way to log into Hell once you have logged into your device with your preferred provider. Passkeys really shine on mobile devices where a biometric is common, and if you have multiple mobile devices they can be synced across them.&lt;/p&gt;&lt;p&gt;When starting a flow from a social app, or linking a social account on mobile, the browser redirect is often stuck in the social app&apos;s in-app browser where your preferred provider no longer has access to its cookies, leading to a frustrating experience as the social provider is starting log in from scratch. Passkeys are available in some in-app browsers allowing for a simple and fast Hell experience compared to using your preferred provider.&lt;/p&gt;&lt;p&gt;The experience is not quite where we would like to be though as the API does not provide an affordance for us to check if you have a Hell passkey before calling the API. If we have a cookie - which we won&apos;t in an in-app browser we have not been in - we know you have a passkey and can prompt you to use it right away. If we don&apos;t have a cookie, you will need to choose to use your Hell Passkey explicitly if you have created one.&lt;/p&gt;&lt;p&gt;Our enrollment experience prompts you to create a Hell Passkey after you have logged in with your preferred provider if you are on a mobile device. If you create one, then you can use it on any mobile device it is synced to. Continuing our philosophy of giving you control over your identity, you can decline to create a passkey or ask us to remind you later.&lt;/p&gt;&lt;p&gt;Passkeys are a step function in user security and convenience. We hope you enjoy using them with Hell, and we also hope the APIs evolve to smooth out the rough edges.&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;Not only is it Star Wars Day, but it is also International Password Day. Expect lots of announcements about passkeys today as the prevailing wisdom is that the best password is no password, and passkeys have emerged as the shiny new replacement.&lt;/p&gt;&lt;p&gt;Despite all the media coverage and promotion by Apple, Google, and Microsoft, passkey adoption is still low. While migrating from usernames and passwords to usernames and passkeys is fairly straightforward, many sites also support social login, and adding passkeys is adding yet another way to log in - and unlike social login where the developer gets profile data - passkeys only provide authentication.&lt;/p&gt;&lt;p&gt;We implemented WebAuthn (the W3C standard for passkeys) a year ago but did not release it as the experience had many sharp edges in corner cases. After several iterations, we are now testing out using passkeys only on mobile devices. Passkeys are not a preferred provider, but a faster way to log into Hell once you have logged into your device with your preferred provider. Passkeys really shine on mobile devices where a biometric is common, and if you have multiple mobile devices they can be synced across them.&lt;/p&gt;&lt;p&gt;When starting a flow from a social app, or linking a social account on mobile, the browser redirect is often stuck in the social app&apos;s in-app browser where your preferred provider no longer has access to its cookies, leading to a frustrating experience as the social provider is starting log in from scratch. Passkeys are available in some in-app browsers allowing for a simple and fast Hell experience compared to using your preferred provider.&lt;/p&gt;&lt;p&gt;The experience is not quite where we would like to be though as the API does not provide an affordance for us to check if you have a Hell passkey before calling the API. If we have a cookie - which we won&apos;t in an in-app browser we have not been in - we know you have a passkey and can prompt you to use it right away. If we don&apos;t have a cookie, you will need to choose to use your Hell Passkey explicitly if you have created one.&lt;/p&gt;&lt;p&gt;Our enrollment experience prompts you to create a Hell Passkey after you have logged in with your preferred provider if you are on a mobile device. If you create one, then you can use it on any mobile device it is synced to. Continuing our philosophy of giving you control over your identity, you can decline to create a passkey or ask us to remind you later.&lt;/p&gt;&lt;p&gt;Passkeys are a step function in user security and convenience. We hope you enjoy using them with Hell, and we also hope the APIs evolve to smooth out the rough edges.&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1683213126135/112d8801-cfc4-4082-b731-89351a0f2bf4.png</hashnode:coverImage></item><item><title><![CDATA[Recommended Providers now Available]]></title><description><![CDATA[Grouping the various login options based on popularity and usage to create a refined login experience.]]></description><link>https://blog.hello.dev/recommended-providers-now-available</link><guid isPermaLink="true">https://blog.hello.dev/recommended-providers-now-available</guid><category><![CDATA[login]]></category><category><![CDATA[SSO]]></category><category><![CDATA[Identity]]></category><dc:creator><![CDATA[Rohan Harikumar]]></dc:creator><pubDate>Fri, 24 Feb 2023 19:30:27 GMT</pubDate><content:encoded>&lt;![CDATA[&lt;p&gt;As we have added to our list of login providers, new users were starting to get overwhelmed with all the options:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266029703/21ccd31d-f216-4e16-8bbf-a61b7b51d1d6.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;To address this issue, we start the experience for new users with a small list of recommended providers. We selected the defaults based on which providers users chose.&lt;/p&gt;&lt;p&gt;On iOS/MacOS devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266052958/2b2e1baa-f6a8-4a44-8b49-43a6ecfb6456.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;On Windows devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266061874/535aaac6-3b32-4965-ac62-14c61d30b178.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;And all other devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266072640/0f5706dc-4634-48e9-bc8b-0da1b347965a.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;Users can show all the other login provider choices&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266975664/d84f8b3b-afa3-429b-b6f4-5ad2678f41e6.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;heading-customizing-the-recommended-login-providers-for-your-users&quot;&gt;Customizing the Recommended Login Providers for Your Users&lt;/h3&gt;&lt;p&gt;With this update, you can override which providers are recommended to your users by setting the &lt;code&gt;provider_hint&lt;/code&gt; query parameter in the authorization URL. For example, if you want to add GitHub and remove email and Apple from the choices, you would pass&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-plaintext&quot;&gt;https://wallet.hello.coop/authorize?{...}&amp;amp;provider_hint=github+email--+apple--&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For details see the &lt;code&gt;provider_hint&lt;/code&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/apis/wallet/#provider_hint&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;New users would then be presented with the following options:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266377895/f6994cb6-a7c9-430d-ab91-3fbb43cae2e8.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;You can check out how &lt;code&gt;provider_hint&lt;/code&gt; works with the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Start building your next app with &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/&quot;&gt;Hell&lt;/a&gt;&lt;/p&gt;]]&gt;</content:encoded><hashnode:content>&lt;![CDATA[&lt;p&gt;As we have added to our list of login providers, new users were starting to get overwhelmed with all the options:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266029703/21ccd31d-f216-4e16-8bbf-a61b7b51d1d6.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;To address this issue, we start the experience for new users with a small list of recommended providers. We selected the defaults based on which providers users chose.&lt;/p&gt;&lt;p&gt;On iOS/MacOS devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266052958/2b2e1baa-f6a8-4a44-8b49-43a6ecfb6456.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;On Windows devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266061874/535aaac6-3b32-4965-ac62-14c61d30b178.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;And all other devices, users are presented with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266072640/0f5706dc-4634-48e9-bc8b-0da1b347965a.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;Users can show all the other login provider choices&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266975664/d84f8b3b-afa3-429b-b6f4-5ad2678f41e6.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;heading-customizing-the-recommended-login-providers-for-your-users&quot;&gt;Customizing the Recommended Login Providers for Your Users&lt;/h3&gt;&lt;p&gt;With this update, you can override which providers are recommended to your users by setting the &lt;code&gt;provider_hint&lt;/code&gt; query parameter in the authorization URL. For example, if you want to add GitHub and remove email and Apple from the choices, you would pass&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;lang-plaintext&quot;&gt;https://wallet.hello.coop/authorize?{...}&amp;amp;provider_hint=github+email--+apple--&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For details see the &lt;code&gt;provider_hint&lt;/code&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/docs/apis/wallet/#provider_hint&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;New users would then be presented with the following options:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1677266377895/f6994cb6-a7c9-430d-ab91-3fbb43cae2e8.png&quot; alt class=&quot;image--center mx-auto&quot; /&gt;&lt;/p&gt;&lt;p&gt;You can check out how &lt;code&gt;provider_hint&lt;/code&gt; works with the &lt;a target=&quot;_blank&quot; href=&quot;https://playground.hello.dev/&quot;&gt;Hell Playground&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Start building your next app with &lt;a target=&quot;_blank&quot; href=&quot;https://www.hello.dev/&quot;&gt;Hell&lt;/a&gt;&lt;/p&gt;]]&gt;</hashnode:content><hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1677843953610/423ba789-8dff-4b1e-a675-585df5a89c20.png</hashnode:coverImage></item></channel></rss>