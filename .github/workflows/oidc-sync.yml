#
# Copying instructions
#
# the STACK must be the cloud formation stack that created the S3 bucket and distribution
#
# The role-to-assume must be the role created for the STACK which is the `${REPO_NAME}-repo`
#


on:
  workflow_dispatch:

env:
  STACK: WwwDevStack #make sure this is the right stack value
  AWS_ACCOUNT: "510094580976"
  REPO: "hello.dev"
jobs:
  deploy:
    name: Upload to Amazon S3
    runs-on: ubuntu-latest
    env:
        ROLE: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/${{ env.REPO }}-repo

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install modules and cache
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Choose the Node.js version you're using
          cache: 'npm' # Specify the cache key

      - name: Restore npm cache
        run: npm ci

      - name: build role name
        run: |
          # Use shell string manipulation to extract the repository name
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          ROLE_NAME="arn:aws:iam::${AWS_ACCOUNT}:role/${REPO_NAME}-repo"
          # Set the environment variable for future steps
          echo "ROLE_NAME=${ROLE_NAME}" >> $GITHUB_ENV

      - name: debug
        run: echo $ROLE_NAME

      - name: Configure web-sync AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume:  ${{ env.ROLE_NAME }} 
          aws-region: us-west-2


      - name: debug2
        run: echo $ROLE
      # - name: Build content
      #   run: npm run build

      # - name: Copy docs dir to S3 bucket with the AWS CLI
      #   run: |
      #     BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $STACK --query 'Stacks[0].Outputs[?OutputKey==`BucketNameOutput`].OutputValue' --output text)
      #     aws s3 sync docs/ s3://${BUCKET_NAME}/

      # - name: Invalidate CloudFront cache
      #   run: |
      #     DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name $STACK --query 'Stacks[0].Outputs[?OutputKey==`DistributionIdOutput`].OutputValue' --output text)
      #     aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
